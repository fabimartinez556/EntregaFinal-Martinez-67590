const toastErrorElement = document.getElementById("toastError"),
  toastError = toastErrorElement
    ? new bootstrap.Toast(toastErrorElement)
    : null;
function mostrarErrorToast(e) {
  toastError &&
    ((document.getElementById("toastErrorMensaje").textContent = e),
    toastError.show());
}
function actualizarBoton(e, t) {
  "enviando" === t
    ? ((e.disabled = !0),
      (e.innerHTML = `
      <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enviando...`))
    : ((e.disabled = !1), (e.innerHTML = "Enviar"));
}
function quitarPreload() {
  requestAnimationFrame(() => {
    document.body.classList.remove("preload"),
      document.body.classList.add("loaded");
  });
}
function iniciarCarrusel() {
  let e = document.querySelector("#carousel");
  if (!e) return;
  let t = bootstrap.Carousel.getOrCreateInstance(e),
    a = e.querySelectorAll(".carousel-item");
  a.length > 1 &&
    e.querySelector(".carousel-inner")?.addEventListener("click", () => {
      t.next();
    });
}
function animacionesConScroll() {
  let e = new IntersectionObserver(
    (e, t) => {
      e.forEach((e) => {
        e.isIntersecting &&
          (e.target.classList.add("visible"), t.unobserve(e.target));
      });
    },
    { threshold: 0.1 }
  );
  document
    .querySelectorAll(
      ".animate-in, .animate-left, .animate-right, .animate-up, .animate-zoom"
    )
    .forEach((t) => e.observe(t));
}
function validarInput(e) {
  e.checkValidity()
    ? (e.classList.remove("is-invalid"), e.classList.add("is-valid"))
    : (e.classList.add("is-invalid"), e.classList.remove("is-valid"));
}
function inicializarFormularioContacto() {
  let e = document.getElementById("formularioContacto");
  if (!e) return;
  let t = document.getElementById("mensaje"),
    a = document.getElementById("mensajeContador"),
    r = document.getElementById("toastEnvio"),
    o = r ? new bootstrap.Toast(r) : null,
    i = e.querySelector('button[type="submit"]'),
    n = e.querySelectorAll("input, textarea");
  t.addEventListener("input", () => {
    let e = t.value.length;
    (a.textContent = `${e} / 500 caracteres`),
      e < 10 || e > 500
        ? (a.classList.add("text-danger"),
          t.classList.add("is-invalid"),
          t.classList.remove("is-valid"))
        : (a.classList.remove("text-danger"),
          t.classList.remove("is-invalid"),
          t.classList.add("is-valid"));
  }),
    n.forEach((e) => {
      e.addEventListener("blur", () => validarInput(e));
    }),
    e.addEventListener("submit", async (r) => {
      r.preventDefault(),
        r.stopPropagation(),
        e.classList.add("was-validated"),
        (t.value = t.value.trim());
      let n = t.value.length >= 10 && t.value.length <= 500;
      if (!e.checkValidity() || !n) {
        let s = e.querySelector(":invalid");
        s && s.focus(),
          n ||
            (t.classList.add("is-invalid"),
            t.classList.remove("is-valid"),
            t.focus());
        return;
      }
      actualizarBoton(i, "enviando");
      let l = new FormData(e);
      try {
        let d = await fetch("https://formspree.io/f/xldbvllv", {
          method: "POST",
          body: l,
          headers: { Accept: "application/json" },
        });
        d.ok
          ? (e.reset(),
            e.classList.remove("was-validated"),
            (a.textContent = "0 / 500 caracteres"),
            t.classList.remove("is-valid", "is-invalid"),
            o && o.show())
          : mostrarErrorToast(
              "Error al enviar el mensaje. Por favor, intent\xe1 de nuevo."
            );
      } catch (c) {
        mostrarErrorToast("Error de red. Intentalo m\xe1s tarde."),
          console.error("Error:", c);
      } finally {
        actualizarBoton(i, "normal");
      }
    });
}
function manejarFormularioComentario() {
  let e = document.getElementById("comentarioForm");
  if (!e) return;
  let t = document.getElementById("toastComentario"),
    a = t ? new bootstrap.Toast(t) : null,
    r = e.querySelector('button[type="submit"]'),
    o = e.querySelectorAll("input, textarea");
  o.forEach((e) => {
    e.addEventListener("blur", () => validarInput(e));
  }),
    e.addEventListener("submit", async (t) => {
      if (
        (t.preventDefault(),
        t.stopPropagation(),
        e.classList.add("was-validated"),
        !e.checkValidity())
      ) {
        let i = e.querySelector(":invalid");
        i && i.focus();
        return;
      }
      actualizarBoton(r, "enviando");
      let n = new FormData(e);
      try {
        let s = await fetch(e.action, {
          method: "POST",
          body: n,
          headers: { Accept: "application/json" },
        });
        s.ok
          ? (e.reset(),
            e.classList.remove("was-validated"),
            o.forEach((e) => e.classList.remove("is-valid", "is-invalid")),
            a && a.show())
          : mostrarErrorToast(
              "Error al enviar el comentario. Por favor, intent\xe1 de nuevo."
            );
      } catch (l) {
        mostrarErrorToast("Error de red. Intentalo m\xe1s tarde."),
          console.error("Error:", l);
      } finally {
        actualizarBoton(r, "normal");
      }
    });
}
window.addEventListener("load", () => {
  quitarPreload(),
    iniciarCarrusel(),
    animacionesConScroll(),
    inicializarFormularioContacto(),
    manejarFormularioComentario();
});
