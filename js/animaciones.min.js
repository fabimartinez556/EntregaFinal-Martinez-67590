const toastErrorElement = document.getElementById("toastError"),
  toastError = toastErrorElement
    ? new bootstrap.Toast(toastErrorElement)
    : null,
  toastErrorMensaje = document.getElementById("toastErrorMensaje");
function mostrarErrorToast(e) {
  toastError && ((toastErrorMensaje.textContent = e), toastError.show());
}
function actualizarBoton(e, t) {
  "enviando" === t
    ? ((e.disabled = !0),
      (e.innerHTML =
        '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enviando...'))
    : ((e.disabled = !1), (e.textContent = "Enviar"));
}
function quitarPreload() {
  requestAnimationFrame(() => {
    document.body.classList.remove("preload"),
      document.body.classList.add("loaded");
  });
}
function iniciarCarrusel() {
  let e = document.querySelector("#carousel");
  if (!e) return;
  let t = bootstrap.Carousel.getOrCreateInstance(e),
    a = e.querySelectorAll(".carousel-item");
  a.length > 1 &&
    e.querySelector(".carousel-inner")?.addEventListener("click", () => {
      t.next();
    });
}
function animacionesConScroll() {
  let e = new IntersectionObserver(
    (e, t) => {
      e.forEach((e) => {
        e.isIntersecting &&
          (e.target.classList.add("visible"), t.unobserve(e.target));
      });
    },
    { threshold: 0.1 }
  );
  document
    .querySelectorAll(
      ".animate-in, .animate-left, .animate-right, .animate-up, .animate-zoom"
    )
    .forEach((t) => e.observe(t));
}
function validarInput(e) {
  e.checkValidity()
    ? (e.classList.remove("is-invalid"), e.classList.add("is-valid"))
    : (e.classList.add("is-invalid"), e.classList.remove("is-valid"));
}
function agregarValidacionInputs(e) {
  e.forEach((e) => {
    e.addEventListener("blur", () => validarInput(e));
  });
}
async function enviarFormulario(e, t, a) {
  actualizarBoton(a, "enviando");
  let r = new FormData(e);
  try {
    let i = await fetch(e.action, {
      method: "POST",
      body: r,
      headers: { Accept: "application/json" },
    });
    if (i.ok)
      return (
        e.reset(),
        e.classList.remove("was-validated"),
        e.querySelectorAll("input, textarea").forEach((e) => {
          e.classList.remove("is-valid", "is-invalid");
        }),
        t && t.show(),
        !0
      );
    return (
      mostrarErrorToast(
        "Error al enviar el formulario. Por favor, intent\xe1 de nuevo."
      ),
      !1
    );
  } catch (n) {
    return (
      mostrarErrorToast("Error de red. Intentalo m\xe1s tarde."),
      console.error("Error:", n),
      !1
    );
  } finally {
    actualizarBoton(a, "normal");
  }
}
function inicializarFormularioContacto() {
  let e = document.getElementById("formularioContacto");
  if (!e) return;
  let t = document.getElementById("mensaje"),
    a = document.getElementById("mensajeContador"),
    r = document.getElementById("toastEnvio"),
    i = r ? new bootstrap.Toast(r) : null,
    n = e.querySelector('button[type="submit"]'),
    o = e.querySelectorAll("input, textarea");
  function s() {
    let e = t.value.trim().length;
    return e >= 10 && e <= 500;
  }
  t.addEventListener("input", () => {
    let e = t.value.length;
    (a.textContent = `${e} / 500 caracteres`),
      s()
        ? (a.classList.remove("text-danger"),
          t.classList.remove("is-invalid"),
          t.classList.add("is-valid"))
        : (a.classList.add("text-danger"),
          t.classList.add("is-invalid"),
          t.classList.remove("is-valid"));
  }),
    agregarValidacionInputs(o),
    e.addEventListener("submit", async (r) => {
      if (
        (r.preventDefault(),
        r.stopPropagation(),
        e.classList.add("was-validated"),
        (t.value = t.value.trim()),
        !e.checkValidity() || !s())
      ) {
        let o = e.querySelector(":invalid");
        o && o.focus(),
          s() ||
            (t.classList.add("is-invalid"),
            t.classList.remove("is-valid"),
            t.focus());
        return;
      }
      (e.action && e.action !== window.location.href) ||
        (e.action = "https://formspree.io/f/xldbvllv"),
        await enviarFormulario(e, i, n),
        (a.textContent = "0 / 500 caracteres");
    });
}
function manejarFormularioComentario() {
  let e = document.getElementById("comentarioForm");
  if (!e) return;
  let t = document.getElementById("toastComentario"),
    a = t ? new bootstrap.Toast(t) : null,
    r = e.querySelector('button[type="submit"]'),
    i = e.querySelectorAll("input, textarea");
  agregarValidacionInputs(i),
    e.addEventListener("submit", async (t) => {
      if (
        (t.preventDefault(),
        t.stopPropagation(),
        e.classList.add("was-validated"),
        !e.checkValidity())
      ) {
        let i = e.querySelector(":invalid");
        i && i.focus();
        return;
      }
      await enviarFormulario(e, a, r);
    });
}
window.addEventListener("load", () => {
  quitarPreload(),
    iniciarCarrusel(),
    animacionesConScroll(),
    inicializarFormularioContacto(),
    manejarFormularioComentario();
});
